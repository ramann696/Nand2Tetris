// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the computer's memory,
 * including RAM and memory mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: If load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load=1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output in the next time step.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // Split load signal: RAM (0xxxx), IO (1xxxx)
    DMux(in=load, sel=address[14], a=ramLoad, b=ioLoad);
    DMux(in=ioLoad, sel=address[13], a=screenLoad, b=keyboardLoad); // keyboardLoad is unused

    // RAM16K
    RAM16K(in=in, load=ramLoad, address=address[0..13], out=ramOut);

    // Screen
    Screen(in=in, load=screenLoad, address=address[0..12], out=screenOut);

    // Keyboard (read-only)
    Keyboard(out=keyboardRaw);

    // Check if address[0..12] == 0 for keyboard address (0x6000)
    Or8Way(in=address[0..7], out=o1);
    Or8Way(in[0]=address[8], in[1]=address[9], in[2]=address[10],
           in[3]=address[11], in[4]=address[12], in[5]=false,
           in[6]=false, in[7]=false, out=o2);
    Or(a=o1, b=o2, out=notZero);
    Not(in=notZero, out=isKeyboardAddress);

    // Allow keyboardOut only if address is exactly 0x6000
    Mux16(a=false, b=keyboardRaw, sel=isKeyboardAddress, out=keyboardOut);

    // Mux4Way16 needs sel[0..1] = address[14..13] (in that order!)
    Mux4Way16(a=ramOut, b=ramOut, c=screenOut, d=keyboardOut,
              sel=address[13..14], out=out);
}
